name: CI

env:
  DEBUG: napi:*
  APP_NAME: package-template
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  CARGO_INCREMENTAL: "1"
  NODE_VERSION: 22

permissions:
  contents: write
  id-token: write

"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: cargo fmt
        run: cargo fmt -- --check
      - name: cargo clippy
        run: cargo clippy
      - name: Install dependencies
        run: pnpm install
      - name: pnpm lint
        run: pnpm lint
  build:
    strategy:
      fail-fast: false
      matrix:
        packages:
          - name: shredstream-proxy-client
            dir: packages/shredstream-proxy-client
          - name: yellowstone-geyser-client
            dir: packages/yellowstone-geyser-client
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build --target x86_64-apple-darwin
          - host: windows-latest
            build: pnpm build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: pnpm build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: pnpm build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: pnpm build --target x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: pnpm build --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: pnpm build --target armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: pnpm build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: pnpm build --target armv7-linux-androideabi
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: pnpm build --target aarch64-unknown-linux-musl
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: wasm32-wasip1-threads
            build: pnpm build --target wasm32-wasip1-threads
    name: Build ${{ matrix.packages.name }} for ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.14.1
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: pnpm install
        run: pnpm install
      - name: Build
        working-directory: ${{ matrix.packages.dir }}
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            ${{ matrix.packages.dir }}/*.node
            ${{ matrix.packages.dir }}/*.wasm
          if-no-files-found: error

  # test-macOS-windows-binding:
  #   name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       packages:
  #         - name: shredstream-proxy-client
  #           dir: packages/shredstream-proxy-client
  #         - name: yellowstone-geyser-client
  #           dir: packages/yellowstone-geyser-client
  #       settings:
  #         - host: windows-latest
  #           target: x86_64-pc-windows-msvc
  #           architecture: x64
  #         - host: windows-11-arm
  #           target: aarch64-pc-windows-msvc
  #           architecture: arm64
  #         - host: macos-latest
  #           target: aarch64-apple-darwin
  #           architecture: arm64
  #         - host: macos-latest
  #           target: x86_64-apple-darwin
  #           architecture: x64
  #       node:
  #         - "20"
  #         - "22"
  #   runs-on: ${{ matrix.settings.host }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: "pnpm"
  #         architecture: ${{ matrix.settings.architecture }}
  #     - name: pnpm install
  #       run: pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-${{ matrix.settings.target }}
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: pnpm test

  # test-linux-binding:
  #   name: Test ${{ matrix.target }} - node@${{ matrix.node }}
  #   needs:
  #     - build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target:
  #         - x86_64-unknown-linux-gnu
  #         - x86_64-unknown-linux-musl
  #         - aarch64-unknown-linux-gnu
  #         - aarch64-unknown-linux-musl
  #         - armv7-unknown-linux-gnueabihf
  #       node:
  #         - "20"
  #         - "22"
  #   runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: "pnpm"
  #     - name: Output docker params
  #       id: docker
  #       run: |
  #         node -e "
  #           if ('${{ matrix.target }}'.startsWith('aarch64')) {
  #             console.log('PLATFORM=linux/arm64')
  #           } else if ('${{ matrix.target }}'.startsWith('armv7')) {
  #             console.log('PLATFORM=linux/arm/v7')
  #           } else {
  #             console.log('PLATFORM=linux/amd64')
  #           }
  #         " >> $GITHUB_OUTPUT
  #         node -e "
  #           if ('${{ matrix.target }}'.endsWith('-musl')) {
  #             console.log('IMAGE=node:${{ matrix.node }}-alpine')
  #           } else {
  #             console.log('IMAGE=node:${{ matrix.node }}-slim')
  #           }
  #         " >> $GITHUB_OUTPUT
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set --json supportedArchitectures.cpu '["current", "arm64", "x64", "arm"]'
  #         pnpm config set --json supportedArchitectures.libc '["current", "musl", "gnu"]'
  #         pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-${{ matrix.target }}
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #       if: ${{ contains(matrix.target, 'armv7') }}
  #       with:
  #         platforms: all
  #     - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #       if: ${{ contains(matrix.target, 'armv7') }}
  #     - name: Test bindings
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: ${{ steps.docker.outputs.IMAGE }}
  #         options: -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}
  #         run: pnpm test

  # test-wasi:
  #   name: Test WASI target
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 22
  #         cache: "pnpm"
  #     - name: Install dependencies
  #       run: |
  #         pnpm config set supportedArchitectures.cpu "wasm32"
  #         pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: bindings-wasm32-wasip1-threads
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: pnpm test
  #       env:
  #         NAPI_RS_FORCE_WASI: 1

  publish:
    name: Publish
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        packages:
          - name: shredstream-proxy-client
            dir: packages/shredstream-proxy-client
          - name: yellowstone-geyser-client
            dir: packages/yellowstone-geyser-client
    needs:
      - lint
      - build
      # - test-macOS-windows-binding
      # - test-linux-binding
      # - test-wasi
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
      - name: pnpm install
        run: pnpm install
      - name: create npm dirs
        working-directory: ${{ matrix.packages.dir }}
        run: pnpm napi create-npm-dirs
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ matrix.packages.dir }}/artifacts
      - name: Move artifacts
        working-directory: ${{ matrix.packages.dir }}
        run: pnpm artifacts
      - name: List packages
        working-directory: ${{ matrix.packages.dir }}
        run: ls -R ./npm
        shell: bash
      - name: Publish
        working-directory: ${{ matrix.packages.dir }}
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            pnpm publish --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
